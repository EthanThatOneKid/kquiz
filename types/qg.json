{
  "definitions": {
    "Command": {
      "discriminator": "type",
      "mapping": {
        "BeginGame": {
          "metadata": {
            "description": "CommandBeginGame is sent by a client to begin a game.\n"
          },
          "properties": {}
        },
        "EndGame": {
          "metadata": {
            "description": "CommandEndGame is sent by a client to end the current game. The server\nwill respond with an EventGameEnded. Only game admins (including the\nhost) can end the game.\n"
          },
          "properties": {
            "declareWinner": {
              "metadata": {
                "description": "declareWinner determines whether the game should be ended with a\nwinner or not. If true, the game will be ended with a winner. If\nfalse, the game will be ended abruptly.\n"
              },
              "type": "boolean"
            }
          }
        },
        "JeopardyChooseQuestion": {
          "metadata": {
            "description": "CommandJeopardyChooseQuestion is sent by a player to choose a question.\nThe server must do validation to ensure that the player is allowed to\nchoose the question.\n"
          },
          "properties": {
            "category": {
              "type": "int32"
            },
            "question": {
              "type": "int32"
            }
          }
        },
        "JeopardyPlayerJudgment": {
          "metadata": {
            "description": "CommandJeopardyPlayerJudgment is emitted by a game admin to indicate\nwhether a player has answered a question correctly. The winning player is\nwhoever the last EventJeopardyButtonPressed event indicated. That player\nwill instantly receive the points for the question, and the game will let\nthem choose the next category and question. If the player answered wrong,\nthen the game will let others press the button.\n"
          },
          "properties": {
            "correct": {
              "type": "boolean"
            }
          }
        },
        "JeopardyPressButton": {
          "metadata": {
            "description": "CommandJeopardyPressButton is emitted when a player presses the button\nduring a question. It is only valid to emit this command when the game is\nin the question state.\n"
          },
          "properties": {}
        },
        "JoinGame": {
          "metadata": {
            "description": "CommandJoinGame is sent by a client to join a game. The client (or the\nuser) supplies a game ID and a player name. The server will respond with\nan EventJoinedGame.\n"
          },
          "properties": {
            "adminPassword": {
              "metadata": {
                "description": "adminPassword is the password of the admin of the game."
              },
              "nullable": true,
              "type": "string"
            },
            "gameID": {
              "metadata": {
                "description": "gameID is the ID of the game to join."
              },
              "ref": "GameID"
            },
            "playerName": {
              "metadata": {
                "description": "playerName is the wanted name of the user."
              },
              "ref": "PlayerName"
            }
          }
        }
      }
    },
    "Error": {
      "metadata": {
        "description": "Error is returned on every API error.\n"
      },
      "properties": {
        "message": {
          "metadata": {
            "description": "Message is the error message"
          },
          "type": "string"
        }
      }
    },
    "Event": {
      "discriminator": "type",
      "mapping": {
        "Error": {
          "properties": {
            "error": {
              "ref": "Error"
            }
          }
        },
        "GameEnded": {
          "metadata": {
            "description": "EventGameEnded is emitted when the current game ends.\n"
          },
          "properties": {
            "leaderboard": {
              "ref": "Leaderboard"
            }
          }
        },
        "GameStarted": {
          "metadata": {
            "description": "EventGameStarted is emitted when the game starts. It contains no data and\nis only meant to be used to trigger the client to start the game.\n"
          },
          "properties": {}
        },
        "JeopardyBeginQuestion": {
          "metadata": {
            "description": "EventJeopardyBeginQuestion is emitted when a question begins within this\nJeopardy game. It is usually emitted once the chooser player has chosen a\ncategory and value.\n\nEach category name and question value will map to a category and question\nwithin the game data. Note that a question may repeat across multiple\ncategories.\n"
          },
          "properties": {
            "category": {
              "type": "int32"
            },
            "chooser": {
              "ref": "PlayerName"
            },
            "points": {
              "type": "float32"
            },
            "question": {
              "type": "string"
            }
          }
        },
        "JeopardyButtonPressed": {
          "metadata": {
            "description": "EventJeopardyButtonPressed is emitted when any player had pressed a button\non their device, voiding other players' buttons. This event is only\nemitted when the game is in the \"question\" state.\n"
          },
          "properties": {
            "playerName": {
              "ref": "PlayerName"
            }
          }
        },
        "JeopardyResumeButton": {
          "metadata": {
            "description": "EventJeopardyResumeButton is emitted when the player can now continue to\npress the button whenever they are ready to answer the question. This\ncould happen if the other player who pressed the button first got the\nquestion wrong.\n\nNote that if alreadyPressed is true, then the player has already pressed\nthe button, so they cannot press it again.\n"
          },
          "properties": {
            "alreadyAnsweredPlayers": {
              "elements": {
                "ref": "PlayerName"
              }
            }
          }
        },
        "JeopardyTurnEnded": {
          "metadata": {
            "description": "EventJeopardyTurnEnded is emitted when a turn ends or when the game first\nstarts.\n"
          },
          "properties": {
            "answered": {
              "ref": "JeopardyAnsweredQuestions"
            },
            "chooser": {
              "ref": "PlayerName"
            },
            "leaderboard": {
              "ref": "Leaderboard"
            }
          }
        },
        "JoinedGame": {
          "metadata": {
            "description": "EventJoinedGame is emitted when the current player joins a game. It is a\nreply to CommandJoinGame and is only for the current player. Not to be\nconfused with EventPlayerJoinedGame, which is emitted when any player\njoins the current game.\n"
          },
          "properties": {
            "gameData": {
              "nullable": true,
              "ref": "GameData"
            },
            "gameID": {
              "type": "string"
            },
            "gameInfo": {
              "ref": "GameInfo"
            },
            "isAdmin": {
              "type": "boolean"
            }
          }
        },
        "PlayerJoined": {
          "metadata": {
            "description": "EventPlayerJoined is emitted when a player joins the current game.\n"
          },
          "properties": {
            "playerName": {
              "ref": "PlayerName"
            }
          }
        }
      }
    },
    "GameData": {
      "discriminator": "game",
      "mapping": {
        "jeopardy": {
          "properties": {
            "data": {
              "ref": "JeopardyGameData"
            }
          }
        },
        "kahoot": {
          "properties": {
            "data": {
              "ref": "KahootGameData"
            }
          }
        }
      },
      "metadata": {
        "description": "GameData is the game data. It contains all the information about the game.\n"
      }
    },
    "GameID": {
      "metadata": {
        "description": "GameID is the unique identifier for a game. Each player must type this\ncode to join the game.\n"
      },
      "type": "string"
    },
    "GameInfo": {
      "discriminator": "type",
      "mapping": {
        "jeopardy": {
          "properties": {
            "data": {
              "ref": "JeopardyGameInfo"
            }
          }
        }
      }
    },
    "GameType": {
      "enum": ["jeopardy", "kahoot"]
    },
    "JeopardyAnsweredQuestions": {
      "elements": {
        "properties": {
          "category": {
            "type": "int32"
          },
          "player": {
            "ref": "PlayerName"
          },
          "question": {
            "type": "int32"
          }
        }
      },
      "metadata": {
        "description": "JeopardyAnsweredQuestions is the list of answered questions for a player.\n"
      }
    },
    "JeopardyCategory": {
      "metadata": {
        "description": "JeopardyCategory is a category in a Jeopardy game.\n"
      },
      "properties": {
        "name": {
          "metadata": {
            "description": "name is the name of the category.\n"
          },
          "type": "string"
        },
        "questions": {
          "elements": {
            "ref": "JeopardyQuestion"
          },
          "metadata": {
            "description": "questions are the questions in the category.\n"
          }
        }
      }
    },
    "JeopardyGameData": {
      "metadata": {
        "description": "JeopardyGameData is the game data for a Jeopardy game.\n"
      },
      "optionalProperties": {
        "score_multiplier": {
          "metadata": {
            "description": "score_multiplier is the score multiplier for each question. The\ndefault is 100.\n"
          },
          "type": "float32"
        }
      },
      "properties": {
        "categories": {
          "elements": {
            "ref": "JeopardyCategory"
          }
        }
      }
    },
    "JeopardyGameInfo": {
      "metadata": {
        "description": "JeopardyGameInfo is the initial information for a Jeopardy game. This type\ncontains no useful information about the entire game data, so it's used to\nsend to players the first time they join.\n"
      },
      "properties": {
        "categories": {
          "elements": {
            "type": "string"
          }
        },
        "numQuestions": {
          "type": "int32"
        },
        "scoreMultiplier": {
          "type": "float32"
        }
      }
    },
    "JeopardyQuestion": {
      "metadata": {
        "description": "JeopardyQuestion is a question in a Jeopardy game.\n"
      },
      "properties": {
        "question": {
          "metadata": {
            "description": "question is the question.\n"
          },
          "type": "string"
        }
      }
    },
    "KahootGameData": {
      "metadata": {
        "description": "KahootGameData is the game data for a Kahoot game.\n"
      },
      "properties": {
        "questions": {
          "elements": {
            "ref": "KahootQuestion"
          },
          "metadata": {
            "description": "questions are the questions in the game.\n"
          }
        },
        "time_limit": {
          "metadata": {
            "description": "time_limit is the time limit for each question. The format is in\nGo's time.Duration, e.g. 10s for 10 seconds.\n"
          },
          "type": "string"
        }
      }
    },
    "KahootQuestion": {
      "metadata": {
        "description": "KahootQuestion is a question in a Kahoot game.\n"
      },
      "properties": {
        "answers": {
          "elements": {
            "type": "string"
          },
          "metadata": {
            "description": "answers are the possible answers.\n"
          }
        },
        "question": {
          "metadata": {
            "description": "question is the question.\n"
          },
          "type": "string"
        }
      }
    },
    "Leaderboard": {
      "elements": {
        "ref": "LeaderboardEntry"
      },
      "metadata": {
        "description": "Leaderboard is a list of players and their scores.\n"
      }
    },
    "LeaderboardEntry": {
      "properties": {
        "playerName": {
          "type": "string"
        },
        "score": {
          "type": "float32"
        }
      }
    },
    "PlayerName": {
      "metadata": {
        "description": "PlayerName is the name of a player.\n"
      },
      "type": "string"
    },
    "RequestGetGame": {
      "properties": {
        "gameID": {
          "type": "string"
        }
      }
    },
    "RequestGetJeopardyGame": {
      "properties": {
        "gameID": {
          "type": "string"
        }
      }
    },
    "RequestNewGame": {
      "properties": {
        "admin_password": {
          "type": "string"
        },
        "data": {
          "ref": "GameData"
        }
      }
    },
    "ResponseGetGame": {
      "properties": {
        "gameType": {
          "ref": "GameType"
        }
      }
    },
    "ResponseGetJeopardyGame": {
      "properties": {
        "info": {
          "ref": "JeopardyGameInfo"
        }
      }
    },
    "ResponseNewGame": {
      "properties": {
        "gameID": {
          "type": "string"
        },
        "gameType": {
          "ref": "GameType"
        }
      }
    }
  }
}
