// Code generated by jtd-codegen for Go v0.2.1. DO NOT EDIT.

package qg

import (
	"encoding/json"
	"fmt"
)

type Qg = interface{}

// Error is returned on every API error.
type Error struct {
	// Message is the error message
	Message string `json:"message"`
}

// Game is the main game object. It contains all the information about the
// game.
type Game struct {
	Game string

	Jeopardy GameJeopardy

	Kahoot GameKahoot
}

func (v Game) MarshalJSON() ([]byte, error) {
	switch v.Game {
	case "jeopardy":
		return json.Marshal(struct { T string `json:"game"`; GameJeopardy }{ v.Game, v.Jeopardy })
	case "kahoot":
		return json.Marshal(struct { T string `json:"game"`; GameKahoot }{ v.Game, v.Kahoot })
	}

	return nil, fmt.Errorf("bad Game value: %s", v.Game)
}

func (v *Game) UnmarshalJSON(b []byte) error {
	var t struct { T string `json:"game"` }
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}

	var err error
	switch t.T {
	case "jeopardy":
		err = json.Unmarshal(b, &v.Jeopardy)
	case "kahoot":
		err = json.Unmarshal(b, &v.Kahoot)
	default:
		err = fmt.Errorf("bad Game value: %s", t.T)
	}

	if err != nil {
		return err
	}

	v.Game = t.T
	return nil
}

type GameJeopardy struct {
	Data Jeopardy `json:"data"`
}

type GameKahoot struct {
	Data Kahoot `json:"data"`
}

// JeopardyGame is the game data for a Jeopardy game.
type Jeopardy struct {
	Categories []JeopardyCategory `json:"categories"`

	// moderators enables moderators being able to join.
	Moderators *bool `json:"moderators,omitempty"`

	// require_name, if true, will require members to input a name before
	// we can participate.
	RequireName *bool `json:"require_name,omitempty"`

	// score_multiplier is the score multiplier for each question. The
	// default is 100.
	ScoreMultiplier *float32 `json:"score_multiplier,omitempty"`
}

// JeopardyCategory is a category in a Jeopardy game.
type JeopardyCategory struct {
	// name is the name of the category.
	Name string `json:"name"`

	// questions are the questions in the category.
	Questions []JeopardyQuestion `json:"questions"`
}

// JeopardyQuestion is a question in a Jeopardy game.
type JeopardyQuestion struct {
	// answers are the possible answers.
	Answers []string `json:"answers"`

	// correct_answer is the correct answer within the list of answers
	// above. The index starts at 1.
	CorrectAnswer int32 `json:"correct_answer"`

	// question is the question.
	Question string `json:"question"`
}

// KahootGame is the game data for a Kahoot game.
type Kahoot struct {
	// questions are the questions in the game.
	Questions []KahootQuestion `json:"questions"`

	// time_limit is the time limit for each question. The format is in
	// Go's time.Duration, e.g. 10s for 10 seconds.
	TimeLimit string `json:"time_limit"`
}

// KahootQuestion is a question in a Kahoot game.
type KahootQuestion struct {
	// answers are the possible answers.
	Answers []string `json:"answers"`

	// question is the question.
	Question string `json:"question"`
}
