// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: queries.sql

package sqlitec

import (
	"context"
	"database/sql"
)

const addGame = `-- name: AddGame :exec
INSERT INTO games (id, typ, data) VALUES (?, ?, ?)
`

type AddGameParams struct {
	ID   string
	Typ  string
	Data []byte
}

func (q *Queries) AddGame(ctx context.Context, arg AddGameParams) error {
	_, err := q.db.ExecContext(ctx, addGame, arg.ID, arg.Typ, arg.Data)
	return err
}

const getGameData = `-- name: GetGameData :one
SELECT data FROM games WHERE id = ? AND typ = ?
`

type GetGameDataParams struct {
	ID  string
	Typ string
}

func (q *Queries) GetGameData(ctx context.Context, arg GetGameDataParams) ([]byte, error) {
	row := q.db.QueryRowContext(ctx, getGameData, arg.ID, arg.Typ)
	var data []byte
	err := row.Scan(&data)
	return data, err
}

const getGameModeratorPassword = `-- name: GetGameModeratorPassword :one
SELECT mod_password FROM games WHERE id = ?
`

func (q *Queries) GetGameModeratorPassword(ctx context.Context, id string) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getGameModeratorPassword, id)
	var mod_password sql.NullString
	err := row.Scan(&mod_password)
	return mod_password, err
}

const getGameType = `-- name: GetGameType :one
SELECT typ FROM games WHERE id = ?
`

func (q *Queries) GetGameType(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, getGameType, id)
	var typ string
	err := row.Scan(&typ)
	return typ, err
}

const listGames = `-- name: ListGames :many
SELECT id FROM games
`

func (q *Queries) ListGames(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setGameModeratorPassword = `-- name: SetGameModeratorPassword :exec
UPDATE games SET mod_password = ? WHERE id = ?
`

type SetGameModeratorPasswordParams struct {
	ModPassword sql.NullString
	ID          string
}

func (q *Queries) SetGameModeratorPassword(ctx context.Context, arg SetGameModeratorPasswordParams) error {
	_, err := q.db.ExecContext(ctx, setGameModeratorPassword, arg.ModPassword, arg.ID)
	return err
}
