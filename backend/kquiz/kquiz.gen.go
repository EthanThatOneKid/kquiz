// Package kquiz provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/discord-gophers/goapi-gen version (devel) DO NOT EDIT.
package kquiz

import (
	"encoding/json"
	"encoding/xml"
	"fmt"
	"net/http"

	"github.com/go-chi/render"
)

// Defines values for GameType.
var (
	UnknownGameType = GameType{}

	GameTypeJeopardy = GameType{"jeopardy"}

	GameTypeKahoot = GameType{"kahoot"}
)

// Error is returned on every API error.
type Error struct {
	// Message is the error message.
	Message string `json:"message"`
}

// GameData describes the initial game state. It consists of everything
// needed to replicate the game from the start.
type GameData struct {
	Data interface{} `json:"data,omitempty"`
}

// JeopardyCategory is a category in a Jeopardy game.
type JeopardyCategory struct {
	// name is the name of the category.
	Name      string             `json:"name"`
	Questions []JeopardyQuestion `json:"questions"`
}

// JeopardyGame is the game data for a Jeopardy game.
type JeopardyGame struct {
	Categories []JeopardyCategory `json:"categories,omitempty"`

	// member_name, if true, will require members to input a name before we
	// can participate.
	MemberName bool `json:"member_name,omitempty"`

	// moderators enables moderators being able to join.
	Moderators bool `json:"moderators,omitempty"`

	// score_multiplier is the score multiplier for each question.
	ScoreMultiplier int      `json:"score_multiplier,omitempty"`
	Style           GameType `json:"style"`
}

// JeopardyQuestion is a question in a Jeopardy game.
type JeopardyQuestion struct {
	// answers are the possible answers.
	Answers []string `json:"answers"`

	// question is the question.
	Question string `json:"question"`
}

// KahootGame is the game data for a Kahoot game.
type KahootGame struct {
	Questions []KahootQuestion `json:"questions"`
	Style     GameType         `json:"style"`

	// time_limit is the time limit for each question.
	TimeLimit *string `json:"time_limit,omitempty"`
}

// KahootQuestion is a question in a Kahoot game.
type KahootQuestion struct {
	// answers are the possible answers.
	Answers []string `json:"answers"`

	// question is the question.
	Question string `json:"question"`
}

// GameType defines model for GameType.
type GameType struct {
	value string
}

func (t *GameType) ToValue() string {
	return t.value
}
func (t *GameType) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.value)
}
func (t *GameType) UnmarshalJSON(data []byte) error {
	var value string
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	return t.FromValue(value)
}
func (t *GameType) FromValue(value string) error {
	switch value {

	case GameTypeJeopardy.value:
		t.value = value
		return nil

	case GameTypeKahoot.value:
		t.value = value
		return nil

	}
	return fmt.Errorf("unknown enum value: %v", value)
}

// Response is a common response struct for all the API calls.
// A Response object may be instantiated via functions for specific operation responses.
// It may also be instantiated directly, for the purpose of responding with a single status code.
type Response struct {
	body        interface{}
	Code        int
	contentType string
}

// Render implements the render.Renderer interface. It sets the Content-Type header
// and status code based on the response definition.
func (resp *Response) Render(w http.ResponseWriter, r *http.Request) error {
	w.Header().Set("Content-Type", resp.contentType)
	render.Status(r, resp.Code)
	return nil
}

// Status is a builder method to override the default status code for a response.
func (resp *Response) Status(code int) *Response {
	resp.Code = code
	return resp
}

// ContentType is a builder method to override the default content type for a response.
func (resp *Response) ContentType(contentType string) *Response {
	resp.contentType = contentType
	return resp
}

// MarshalJSON implements the json.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(resp.body)
}

// MarshalXML implements the xml.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.Encode(resp.body)
}

// TestJSON200Response is a constructor method for a Test response.
// A *Response is returned with the configured status code and content type from the spec.
func TestJSON200Response(body GameData) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// TestJSON400Response is a constructor method for a Test response.
// A *Response is returned with the configured status code and content type from the spec.
func TestJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}
